package ${packageName}.controller;

import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.auiucloud.core.log.annotation.Log;
import com.auiucloud.core.common.api.ApiResult;
import com.auiucloud.core.database.model.Search;
import com.auiucloud.core.common.utils.poi.ExcelUtil;
import com.auiucloud.core.common.controller.BaseController;
    #if($table.crud || $table.sub)
    import com.auiucloud.core.database.utils.PageUtils;
    #elseif($table.tree)
    #end

import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletResponse;

import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * ${functionName}控制器
 *
 * @author ${author}
 * @date ${datetime}
 */
@Tag(name = "${functionName}")
@RestController
@RequiredArgsConstructor
@RequestMapping("/${businessName}")
public class ${ClassName}Controller extends BaseController {

    private final I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @Log(value = "${functionName}", exception = "查询${functionName}列表请求异常")
    @GetMapping("/list")
    @Operation(summary = "查询${functionName}列表")
    @Parameters({
            @Parameter(name = "pageNum", required = true, description = "当前页", in = ParameterIn.QUERY),
            @Parameter(name = "pageSize", required = true, description = "每页显示数据", in = ParameterIn.QUERY),
            @Parameter(name = "keyword", required = true, description = "模糊查询关键词", in = ParameterIn.QUERY),
            @Parameter(name = "startDate", required = true, description = "创建开始日期", in = ParameterIn.QUERY),
            @Parameter(name = "endDate", required = true, description = "创建结束日期", in = ParameterIn.QUERY),
    })
    public ApiResult<?> list(Search search, ${ClassName} ${className}) {
        PageUtils list = ${className}Service.listPage(search, ${className});
        return ApiResult.data(list);
    }

    /**
     * 获取${functionName}详情
     */
    @Log(value = "${functionName}", exception = "获取${functionName}详情请求异常")
    @GetMapping(value = "/info/{${pkColumn.javaField}}")
    @Operation(summary = "获取${functionName}详情", description = "根据${pkColumn.javaField}获取${functionName}详情")
    @Parameters({
            @Parameter(name = "${pkColumn.javaField}", required = true, description = "ID", in = ParameterIn.PATH),
    })
    public ApiResult<?> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return ApiResult.data(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @Log(value = "${functionName}", exception = "新增${functionName}请求异常")
    @PostMapping
    @Operation(summary = "新增${functionName}")
    public ApiResult<?> add(@RequestBody ${ClassName} ${className}) {
        return ApiResult.condition(${className}Service.save(${className}));
    }

    /**
     * 修改${functionName}
     */
    @Log(value = "${functionName}", exception = "修改${functionName}请求异常")
    @PutMapping
    @Operation(summary = "修改${functionName}")
    public ApiResult<?> edit(@RequestBody ${ClassName} ${className}) {
        return ApiResult.condition(${className}Service.updateById(${className}));
    }

    /**
     * 删除${functionName}
     */
    @Log(value = "${functionName}", exception = "删除${functionName}请求异常")
    @DeleteMapping
    @Operation(summary = "删除${functionName}")
    public ApiResult<?> remove(@RequestBody ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return ApiResult.condition(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)));
    }

    /**
     * 导出${functionName}
     */
    @Log(value = "${functionName}", exception = "导出${functionName}请求异常")
    @GetMapping("/export")
    @Operation(summary = "导出${functionName}")
    public void export(Search search, ${ClassName} ${className}, HttpServletResponse response) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(search, ${className});
        String fileName = "${functionName}" + System.currentTimeMillis();
        ExcelUtil.exportExcel(list, "sheet1", ${ClassName}. class, fileName, response);
    }
}
